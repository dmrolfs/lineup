include "application"

akka.persistence.journal.leveldb.dir = "/var/lib/spotlight/data/leveldb/journal"
akka.persistence.journal.leveldb-shared.store.dir = "/var/lib/spotlight/data/leveldb/shared-journal"
akka.persistence.snapshot-store.local.dir = "/var/lib/spotlight/data/leveldb/snapshots"

# override default (DEV) settings
spotlight {
  metrics {
    publish-frequency: 10s
    graphite = ${graphite}
    csv.dir: ""
  }

  publish.graphite = ${graphite}

  plan-regex = "prod-las\\..*"

  training {
    archival: off
    whitelist: ["^prod-las\\.", "^spotlight\\.", "^omnibus\\.", "^streammonitor\\."]
    home: /var/log/training
  }
}


graphite {
  host: 172.31.19.59
  port: 2004

  env-name: "prod-las"
  env-name: ${?ENVNAME} # optional override with environment variable if set
}


kamon {
  metric {
    tick-interval = 10 seconds

    filters {
      akka-actor {
        includes = [ "Spotlight/user/workflow-supervisor/**" ]
        #    excludes = [ "my-app/system/**", "my-app/user/worker-helper" ]
      }

      akka-dispatcher {
        includes = [ "Spotlight/akka.actor.default-dispatcher", "Spotlight/*" ]
      }

      akka-router {
        includes = [ "Spotlight/user/some-router" ]
      }
    }
  }

  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = ${graphite.host}
    port = ${graphite.port}

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 60 seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    report-system-metrics = true

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "Spotlight"
    }
  }
}
