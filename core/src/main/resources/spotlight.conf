include "logging.conf"
include "spotlight-akka"

com.persist.logging {
  logLevel = warn
  slf4jLogLevel = warn
  akkaLogLevel = warn
  gc = false
  time = false
  appenders {
    stdout.width = 100
    file.logPath = ${HOME}/spotlight/log
  }
}

spotlight {
  logging {
    filter {
      active: yes
      include-classname-segments: ["PlanCatalog", "DetectionAlgorithmRouter$Registry"]
    }
  }

  default-algorithm {
    tolerance: 3
    publish-threshold: yes
    minimum-population: 1
  }

  algorithms {
    simple-moving-average: ${spotlight.default-algorithm} {
      class: spotlight.analysis.algorithm.statistical.SimpleMovingAverageAlgorithm
    }

    ewma: ${spotlight.default-algorithm} {
      class: spotlight.analysis.algorithm.statistical.ExponentialMovingAverageAlgorithm
      alpha: 0.05
    }

#    seasonal-ewma: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.statistical.SeasonalExponentialMovingAvereageAlgorithm
#      wavelength: 1 day
#      bins: 24
#    }

    grubbs: ${spotlight.default-algorithm} {
      class: spotlight.analysis.algorithm.statistical.GrubbsAlgorithm
      alpha: 0.05
      minimum-population: 7
      sample-size: 8640 // number of points per day assuming 1pt / 10sec rate
    }

#    mean-subtraction-cumulation: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.statistical.MeanSubtractionCumulationAlgorithm
#    }

#    median-absolute-deviation: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.statistical.MedianAbsoluteDeviationAlgorithm
#    }

#    dbscan: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.density.DBSCANAlgorithm
#      publish-threshold: no // math not worked out yet
#      alpha: 0.05
#      min-density-connected-points: 3
#      seed-eps: 3
#    }

#    least-squares: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.regression.LeastSquaresAlgorithm
#    }

#    ks-test: ${spotlight.default-algorithm} {
#      class: spotlight.analysis.algorithm.???.KolmogorovSmirnovAlgorithm
#      reference-offset: 20 seconds
#    }

    past-period: ${spotlight.default-algorithm} {
      class = sandbox.algorithm.PastPeriodAverageAlgorithm
    }
  }

  workflow {
    buffer: 100
    detect {
      timeout: Inf // 60s // 10s
      parallelism-cpu-factor: 16 // 4 //16 // 32:25 //16:49.5 //4:24.6
    }
  }

  metrics {
    publish-frequency: 3s
    csv.dir: ${LOG_HOME}/metrics
  }

  training {
    archival: off
#    whitelist: ["^prod\\.", "^spotlight\\.", "^omnibus\\.", "^streammonitor\\."]  #PROD
    home: ./log/training
    batch {
      max-points: 10000
      window: 2 minutes
    }
  }
}
