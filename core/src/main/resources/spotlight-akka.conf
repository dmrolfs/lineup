akka {
//  loggers = ["akka.event.slf4j.Slf4jLogger"]
//  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-config-on-start = off
  log-dead-letters-during-shutdown = off
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = WARNING
  stdout-loglevel = WARNING

  actor.debug {
    receive = off
    lifecycle = on
    autoreceive = on
    unhandled = on
    router-misconfiguration = on
  }
}

akka.remote {
  log-remote-lifecycle-events = off
  netty.tcp {
    hostname = "127.0.0.1"
    port = 2552
  }
}

akka.actor.provider = "akka.cluster.ClusterActorRefProvider"
//akka.cluster {
//  auto-down-unreachable-after = 60s
//
//  seed-nodes = [
//    "akka.tcp://Spotlight@127.0.0.1:2552"
//  ]
//}

peds.persistence.journal.memory {
  # Class name of the plugin.
  class = "peds.akka.persistence.MemoryJournal"
  # Dispatcher for the plugin actor.
//  plugin-dispatcher = "akka.actor.default-dispatcher"
  plugin-dispatcher = "spotlight.dispatchers.memory-journal-dispatcher"
  expected-persistence-ids = 10000
}



akka.persistence {
  # On a single node, algorithm journalling inmemory and cassandra snapshot works well even at massive scale
  algorithm.journal.plugin = ${peds.persistence.journal.memory}

//  algorithm.journal.plugin = ${cassandra-journal}
//  algorithm.snapshot.plugin = ${akka.persistence.snapshot-store.local}

//  journal.plugin = "akka.persistence.journal.leveldb"
//  journal.leveldb.dir = "./graphite/target/data/leveldb/journal"
//  snapshot-store.plugin = "akka.persistence.snapshot-store.local"
//  snapshot-store.local.dir = "./graphite/target/data/leveldb/snapshots"

  # In production all-cassandra is preferred
//  algorithm.journal.plugin = ${cassandra-journal}
  algorithm.snapshot.plugin = ${cassandra-snapshot-store}
  journal.plugin = "cassandra-journal"
  snapshot-store.plugin = "cassandra-snapshot-store"
}

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  actor {
    kryo  {
      # Possibles values for type are: graph or nograph
      # graph supports serialization of object graphs with shared nodes
      # and cyclic references, but this comes at the expense of a small
      # overhead nograph does not support object grpahs with shared nodes,
      # but is usually faster
      type = "graph"

      # Possible values for idstrategy are:
      # default, explicit, incremental, automatic
      #
      # default - slowest and produces bigger serialized representation.
      # Contains fully-qualified class names (FQCNs) for each class. Note
      # that selecting this strategy does not work in version 0.3.2, but
      # is available from 0.3.3 onward.
      #
      # explicit - fast and produces compact serialized representation.
      # Requires that all classes that will be serialized are pre-registered
      # using the "mappings" and "classes" sections. To guarantee that both
      # sender and receiver use the same numeric ids for the same classes it
      # is advised to provide exactly the same entries in the "mappings"
      # section.
      #
      # incremental - fast and produces compact serialized representation.
      # Support optional pre-registering of classes using the "mappings"
      # and "classes" sections. If class is not pre-registered, it will be
      # registered dynamically by picking a next available id To guarantee
      # that both sender and receiver use the same numeric ids for the same
      # classes it is advised to pre-register them using at least the "classes" section.
      #
      # automatic -  use the pre-registered classes with fallback to FQCNs
      # Contains fully-qualified class names (FQCNs) for each non pre-registered
      # class in the "mappings" and "classes" sections. This strategy was
      # added in version 0.4.1 and will not work with the previous versions

      idstrategy = "default"

      # Define a default queue builder, by default ConcurrentLinkedQueue is used.
      # Create your own queue builder by implementing the trait QueueBuilder,
      # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
      #
      # If you pass a bounded queue make sure its capacity is equal or greater than the
      # maximum concurrent remote dispatcher threads your application will ever have
      # running; failing to do this will have a negative performance impact:
      #
      # custom-queue-builder = "a.b.c.KryoQueueBuilder"

      # Define a default size for byte buffers used during serialization
      buffer-size = 4096

      # The serialization byte buffers are doubled as needed until they
      # exceed max-buffer-size and an exception is thrown. Can be -1
      # for no maximum.
      max-buffer-size = -1

      # If set, akka uses manifests to put a class name
      # of the top-level object into each message
      use-manifests = false

      # If set it will use the UnsafeInput and UnsafeOutput
      # Kyro IO instances. Please note that there is no guarantee
      # for backward/forward compatibility of unsafe serialization.
      # It is also not compatible with the safe-serialized values.
      # The unsafe IO usually creates bugger payloads but is faster
      # for some types, e.g. native arrays.
      use-unsafe = false

      # The transformations that have be done while serialization
      # Supported transformations: compression and encryption
      # accepted values(comma separated if multiple): off | lz4 | deflate | aes
      # Transformations occur in the order they are specified
      # post-serialization-transformations = "lz4,aes"
      post-serialization-transformations = "lz4"

      # Settings for aes encryption, if included in transformations AES
      # algo mode, key and custom key class can be specified AES algo mode
      # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
      # If custom key class is provided, Kryo will use the class specified
      # by a fully qualified class name to get custom AES key. Such a
      # class should define the method 'kryoAESKey'. This key overrides 'key'.
      # If class doesn't contain 'kryoAESKey' method, specified key is used.
      # If this is not present, default key is used
      encryption {
        aes {
          mode = "AES/CBC/PKCS5Padding"
          key = "8umV6DFRP#Cu5QCh"
          IV-length = 16
        }
      }

      # Log implicitly registered classes. Useful, if you want to know all
      # classes which are serialized. You can then use this information in
      # the mappings and/or classes sections
      implicit-registration-logging = true

      # If enabled, Kryo logs a lot of information about serialization process.
      # Useful for debugging and low-level tweaking
      kryo-trace = false

      # If proviced, Kryo uses the class specified by a fully qualified
      # class name to perform a custom initialization of Kryo instances in
      # addition to what is done automatically based on the config file.
      kryo-custom-serializer-init = "spotlight.serialization.kryo.KryoSerializationInit"

      # If enabled, allows Kryo to resolve subclasses of registered Types.
      #
      # This is primarily useful when idstrategy is set to "explicit". In this
      # case, all classes to be serialized must be explicitly registered. The
      # problem is that a large number of common Scala and Akka types (such as
      # Map and ActorRef) are actually traits that mask a large number of
      # specialized classes that deal with various situations and optimizations.
      # It isn't straightforward to register all of these, so you can instead
      # register a single supertype, with a serializer that can handle *all* of
      # the subclasses, and the subclasses get serialized with that.
      #
      # Use this with care: you should only rely on this when you are confident
      # that the superclass serializer covers all of the special cases properly.
      resolve-subclasses = true

      # Define mappings from a fully qualified class name to a numeric id.
      # Smaller ids lead to smaller sizes of serialized representations.
      #
      # This section is:
      # - mandatory for idstrategy="explicit"
      # - ignored   for idstrategy="default"
      # - optional  for incremental and automatic
      #
      # The smallest possible id should start at 20 (or even higher), because
      # ids below it are used by Kryo internally e.g. for built-in Java and
      # Scala types
      mappings {
        "spotlight.model.outlier.OutlierPlan" = 50
        "spotlight.model.outlier.OutlierPlan$SimpleOutlierPlan" = 51
        "spotlight.model.outlier.OutlierPlan$AppliesTo$$anon$11" = 52
        "spotlight.model.outlier.IsQuorum$MajorityQuorumSpecification" = 53
        "spotlight.model.outlier.ReduceOutliers$$anon$1" = 54
        "spotlight.analysis.OutlierDetection$$anonfun$1" = 55
        "spotlight.model.outlier.OutlierPlan$Summary" = 56
        "spotlight.analysis.algorithm.AlgorithmProtocol$ConfigurationChanged" = 57
        "spotlight.model.outlier.OutlierPlan$Scope" = 58
        "spotlight.model.timeseries.package$Topic" = 59
        "spotlight.analysis.algorithm.AlgorithmProtocol$Advanced" = 60
        "spotlight.model.timeseries.DataPoint" = 61
        "spotlight.model.timeseries.ThresholdBoundary" = 62

        "demesne.module.entity.messages.Added" = 70
        "demesne.module.entity.messages.Renamed" = 71
        "demesne.module.entity.messages.Reslugged" = 72
        "demesne.module.entity.messages.Disabled" = 73
        "demesne.module.entity.messages.Enabled" = 74
        "demesne.index.IndexAggregateProtocol$Recorded" = 75
        "demesne.index.IndexIdentifier" = 76

        "peds.commons.identifier.ShortUUID" = 77
        "peds.commons.identifier.TaggedID" = 78

        "spotlight.analysis.algorithm.statistical.SimpleMovingAverageAlgorithm$State" = 100
        "spotlight.analysis.algorithm.statistical.GrubbsAlgorithm$State" = 101

//        "com.typesafe.config.Config" = 90
//        "com.typesafe.config.impl.SimpleConfig" = 91
//        "com.typesafe.config.impl.SimpleConfigObject" = 92
//        "com.typesafe.config.impl.ConfigString$Unquoted" = 93
//        "com.typesafe.config.impl.SimpleConfigOrigin" = 94
//        "com.typesafe.config.impl.OriginType" = 95

        "org.joda.time.DateTime" = 200
        "org.joda.time.chrono.ISOChronology" = 201
        "org.joda.time.chrono.ZonedChronology" = 202
        "org.joda.time.chrono.GregorianChronology" = 203
        "org.joda.time.tz.CachedDateTimeZone" = 204
        "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone" = 205
        "org.joda.time.tz.DateTimeZoneBuilder$DSTZone" = 206
        "org.joda.time.tz.DateTimeZoneBuilder$Recurrence" = 207
        "org.joda.time.tz.DateTimeZoneBuilder$OfYear" = 208

        "org.apache.commons.math3.stat.descriptive.SummaryStatistics" = 220
      }

      # Define a set of fully qualified class names for
      # classes to be used for serialization.
      # The ids for those classes will be assigned automatically,
      # but respecting the order of declaration in this section
      #
      # This section is ignored for idstrategy="default" and optional for
      # all other.
//      classes = [
//      ]
    }

    serializers {
      java = "akka.serialization.JavaSerializer"
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "demesne.EventLike" = kryo
      "spotlight.model.outlier.OutlierPlan" = kryo
      "peds.archetype.domain.model.core.Entity" = kryo
      "org.apache.commons.math3.stat.descriptive.SummaryStatistics" = kryo
    }
  }
}

spotlight.dispatchers {
  outlier-detection-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    #  throughput = 100
    fork-join-executor { }
  }

  publishing-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 8
    }
  }

  memory-journal-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    #  throughput = 100
    fork-join-executor { }
  }
  //  publisher-dispatcher {
//    type = Dispatcher
//    executor = "fork-join-executor"
//    fork-join-executor {
//      #    parallelism-min = 4
//      #    parallelism-tolerance = 2.0
//      #    parallelism-max = 16
//    }
//  }
}

//plan-router-dispatcher {
//  type = Dispatcher
//  executor = "fork-join-executor"
//  //  throughput = 100
//  fork-join-executor { }
//}


