lineup {
  source {
    host: "0.0.0.0"
    port: 2004
    window-size: 2m
    buffer: 100000
  }

  publish.graphite = ${graphite} {
#    host: localhost               # DEV
#    port: 20400                   # DEV
  }

  metrics {
    publish-frequency: 10s
    graphite = ${graphite}  # PROD
#    csv.dir: ${LOG_HOME}/metrics    # DEV
  }

  workflow {
    detect.timeout: 10s
    buffer: 10000
  }

  detection-plans {
    prod = ${lineup.dbscan-plan} { regex: "prod\\..*" }
#    default = ${lineup.dbscan-plan} { is-default: off }
  }


  dbscan-plan {
    algorithms: [dbscan]
    algorithm-config {
      dbscan {
        eps: 3
        minDensityConnectedPoints: 3
      }
    }
  }
}


graphite {
  host: 172.31.19.99
  port: 2004
#    host: 139.126.184.209
#    host: "52.88.220.252"
#    host: metrics.dmg.cdkglobal.com

  env-name: "prod"
  env-name: ${?ENVNAME} # optional override with environment variable if set
}


kamon {
  metric {
    tick-interval = 10 seconds

    filters {
      akka-actor {
        includes = ["Lineup/user/workflow-supervisor/**"]
        #    excludes = [ "my-app/system/**", "my-app/user/worker-helper" ]
      }

      akka-dispatcher {
        includes = ["Lineup/akka.actor.default-dispatcher", "Graphite/*"]
      }

      akka-router {
        includes = ["Lineup/user/some-router"]
      }
    }
  }

  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = ${graphite.host}
    port = ${graphite.port}

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 60 seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    report-system-metrics = true

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "Lineup"
    }
  }
}
